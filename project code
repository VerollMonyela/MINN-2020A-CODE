import os
import secrets
import webbrowser
import threading
import time
from flask import Flask, render_template, request, redirect, url_for, session, flash
from werkzeug.security import generate_password_hash, check_password_hash
import pandas as pd
import folium
import plotly
import plotly.graph_objs as go
from functools import wraps
import json

app = Flask(__name__)
app.secret_key = "african-minerals-secret-key-2025"

# Ensure directories exist
os.makedirs("data", exist_ok=True)
os.makedirs(os.path.join("static", "maps"), exist_ok=True)
os.makedirs("templates", exist_ok=True)

# -------------------- CSV Data Creation --------------------
def create_data_files():
    """Create all required CSV files with the provided data"""
    
    # Countries data
    countries_data = """CountryID,CountryName,GDP_BillionUSD,MiningRevenue_BillionUSD,KeyProjects,Region
1,DRC (Congo),55,12,Cobalt expansion in Kolwezi,Central Africa
2,South Africa,350,25,Bushveld Lithium Project,Southern Africa
3,Mozambique,20,4,Balama Graphite Project,Southern Africa
4,Namibia,15,3,Otjozondu Manganese Project,Southern Africa
5,Zambia,25,6,Copperbelt expansion,Southern Africa
6,Zimbabwe,28,5,Sandawana Lithium Mine,Southern Africa
7,Morocco,130,3,Cobalt processing plant,North Africa
8,Ghana,75,8,Bauxite mining expansion,West Africa"""
    
    # Minerals data
minerals_data = """MineralID,MineralName,Description,MarketPriceUSD_per_tonne
1,Cobalt,Used in lithium-ion batteries for EVs and energy storage,52000
2,Lithium,Essential component for electric vehicle batteries,70000
3,Graphite,Anode material for lithium-ion batteries and industrial lubricants,800
4,Manganese,Critical for steel production and battery cathodes,2200
5,Platinum,PGM for catalytic converters and hydrogen fuel cells,32000
6,Copper,Essential for electrical wiring and renewable energy systems,8500
7,Nickel,Used in lithium-ion batteries and stainless steel,18000
8,Chromium,Essential for stainless steel production,12000"""
    
    # Roles data
    roles_data = """RoleID,RoleName
1,Administrator
2,Investor
3,Researcher"""
    
    # Production stats
    production_data = """ProductionID,Year,CountryID,MineralID,Production_tonnes,ExportValue_BillionUSD
1,2023,1,1,100000,5.2
2,2023,2,2,120000,8.4
3,2023,3,3,50000,0.9
4,2023,4,4,200000,2.7
5,2023,5,6,800000,6.8
6,2023,6,2,25000,1.75
7,2023,7,1,15000,0.78
8,2023,8,5,5000,0.16
9,2024,1,1,110000,6.0
10,2024,2,2,130000,9.1
11,2024,3,3,55000,1.1
12,2024,4,4,210000,3.0
13,2024,5,6,850000,7.2
14,2024,6,2,28000,2.1"""
    
    # Sites data
    sites_data = """SiteID,SiteName,CountryID,MineralID,Latitude,Longitude,Production_tonnes
1,Kolwezi Cobalt Mine,1,1,-10.7167,25.4667,100000
2,Bushveld Lithium Project,2,2,-25.7667,27.7500,120000
3,Balama Graphite Mine,3,3,-13.3333,38.7667,50000
4,Kalahari Manganese Field,4,4,-27.0833,22.9500,200000
5,Copperbelt Mine,5,6,-12.8233,28.1976,800000
6,Sandawana Lithium Mine,6,2,-20.2667,30.0833,25000
7,Atlas Cobalt Project,7,1,31.7917,-7.0926,15000
8,Awaso Bauxite Mine,8,5,6.3000,-2.3833,5000"""
    
    # Write files
    files = {
        'countries.csv': countries_data,
        'minerals.csv': minerals_data,
        'roles.csv': roles_data,
        'production_stats.csv': production_data,
        'sites.csv': sites_data
    }
 
    for filename, data in files.items():
        filepath = os.path.join("data", filename)
        if not os.path.exists(filepath):
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(data)
            print(f"Created {filepath}")

    # Create users with EXACT passwords as specified
    users_file = os.path.join("data", "users.csv")
    if not os.path.exists(users_file):
        users_data = pd.DataFrame([
            {
                "UserID": 1,
                "Username": "admin01",
                "PasswordHash": generate_password_hash("hash123"),
                "RoleID": 1,
                "Email": "admin01@chronominerals.com"
            },
            {
                "UserID": 2,
                "Username": "investor01", 
                "PasswordHash": generate_password_hash("hash456"),
                "RoleID": 2,
                "Email": "investor01@chronominerals.com"
            },
            {
                "UserID": 3,
                "Username": "research01",
                "PasswordHash": generate_password_hash("hash789"),
                "RoleID": 3,
                "Email": "research01@wits.ac.za"
            }
        ])
        users_data.to_csv(users_file, index=False)
        print(f"Created {users_file}")

# Create data files on startup
create_data_files()

# -------------------- Utility Functions --------------------
def load_csv(filename):
    """Load csv from data folder into pandas DataFrame."""
    filepath = os.path.join("data", filename)
    if os.path.exists(filepath):
        try:
            return pd.read_csv(filepath)
        except Exception as e:
            print(f"Failed to read {filepath}: {e}")
            return pd.DataFrame()
    return pd.DataFrame()

def save_csv(df, filename):
    """Save DataFrame to CSV in data folder."""
    filepath = os.path.join("data", filename)
    df.to_csv(filepath, index=False)

# -------------------- Decorators --------------------
def login_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if 'username' not in session:
            flash("Please log in to access this page.", "warning")
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated

def admin_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if 'username' not in session or session.get('role') != 'Administrator':
            flash("Administrator access required.", "danger")
            return redirect(url_for('dashboard'))
        return f(*args, **kwargs)
create_data_files()

# -------------------- Utility Functions --------------------
def load_csv(filename):
    """Load csv from data folder into pandas DataFrame."""
    filepath = os.path.join("data", filename)
    if os.path.exists(filepath):
        try:
            return pd.read_csv(filepath)
        except Exception as e:
            print(f"Failed to read {filepath}: {e}")
            return pd.DataFrame()
    return pd.DataFrame()

def save_csv(df, filename):
    """Save DataFrame to CSV in data folder."""
    filepath = os.path.join("data", filename)
    df.to_csv(filepath, index=False)

# -------------------- Decorators --------------------
def login_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if 'username' not in session:
            flash("Please log in to access this page.", "warning")
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated

def admin_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if 'username' not in session or session.get('role') != 'Administrator':
            flash("Administrator access required.", "danger")
            return redirect(url_for('dashboard'))
        return f(*args, **kwargs)
urn decorated

# -------------------- HTML Templates --------------------
base_html = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}African Critical Minerals Tracker{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .navbar-brand { font-weight: bold; color: #2c3e50 !important; }
        .hero-section { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 60px 0; }
        .feature-card { transition: transform 0.3s; border: none; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        .feature-card:hover { transform: translateY(-5px); }
        .mineral-badge { font-size: 0.8em; padding: 5px 10px; margin: 2px; }
        .welcome-user { color: #2c3e50; font-weight: 500; }
        .source-code-link { border: 1px solid #6c757d; }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('dashboard') }}">
                <i class="fas fa-gem me-2"></i>Chrono Minerals Tracker
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                {% if session.username %}
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('dashboard') }}">
 <i class="fas fa-tachometer-alt me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('minerals') }}">
                            <i class="fas fa-database me-1"></i>Minerals Database
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('minerals_map') }}">
                            <i class="fas fa-map-marked-alt me-1"></i>Interactive Map
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('charts') }}">
                            <i class="fas fa-chart-bar me-1"></i>Analytics
                        </a>
                    </li>
                    {% if session.role == 'Administrator' %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('admin_users') }}">
                            <i class="fas fa-users-cog me-1"></i>User Management
                        </a>
                    </li>
                    {% endif %}
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <span class="welcome-user me-3">
                            <i class="fas fa-user me-1"></i>{{ session.username }} ({{ session.role }})
                        </span>
                    </li>
                    <li class="nav-item">
                        <a class="btn btn-outline-secondary btn-sm source-code-link me-2" href="{{ url_for('source_code') }}" target="_blank">
 <i class="fas fa-code me-1"></i>View Source Code
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="btn btn-outline-danger btn-sm" href="{{ url_for('logout') }}">
                            <i class="fas fa-sign-out-alt me-1"></i>Logout
                        </a>
                    </li>
                </ul>
                {% else %}
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('login') }}">Login</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('signup') }}">Sign Up</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('source_code') }}" target="_blank">
                            <i class="fas fa-code me-1"></i>Source Code
                        </a>
                    </li>
                </ul>
                {% endif %}
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
 {% endif %}
        {% endwith %}

        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    {% block scripts %}{% endblock %}
</body>
</html>
'''

login_html = '''
{% extends "base.html" %}
{% block title %}Login - African Critical Minerals Tracker{% endblock %}
{% block content %}
<div class="row justify-content-center">
    <div class="col-md-5">
        <div class="card feature-card">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0"><i class="fas fa-sign-in-alt me-2"></i>Login</h4>
            </div>
            <div class="card-body">
                <form method="POST">
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <input type="text" class="form-control" name="username" required placeholder="Enter your username">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-control" name="password" required placeholder="Enter your password">
                    </div>
<button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-sign-in-alt me-1"></i>Login
                    </button>
                </form>
                
                <div class="mt-4 p-3 bg-light rounded">
                    <h6><i class="fas fa-info-circle me-1"></i>Test Accounts:</h6>
                    <div class="small">
                        <strong>Admin:</strong> admin01 / hash123<br>
                        <strong>Investor:</strong> investor01 / hash456<br>
                        <strong>Researcher:</strong> research01 / hash789
                    </div>
                </div>
                
                <div class="text-center mt-3">
                    <a href="{{ url_for('source_code') }}" class="btn btn-outline-secondary btn-sm" target="_blank">
                        <i class="fas fa-code me-1"></i>View Source Code
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
'''

signup_html = '''
{% extends "base.html" %}
{% block title %}Sign Up - African Critical Minerals Tracker{% endblock %}
{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card feature-card">
            <div class="card-header bg-success text-white">
                <h4 class="mb-0"><i class="fas fa-user-plus me-2"></i>Sign Up</h4>
            </div>
            <div class="card-body">
 <form method="POST">
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <input type="text" class="form-control" name="username" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-control" name="password" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-select" name="role" required>
                            <option value="">Select a role</option>
                            <option value="Administrator">Administrator</option>
                            <option value="Investor">Investor</option>
                            <option value="Researcher">Researcher</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-success w-100">
                        <i class="fas fa-user-plus me-1"></i>Create Account
                    </button>
                </form>
                <div class="text-center mt-3">
                    <a href="{{ url_for('login') }}">Already have an account? Login here</a>
                </div>
                <div class="text-center mt-2">
                    <a href="{{ url_for('source_code') }}" class="btn btn-outline-secondary btn-sm" target="_blank">
                        <i class="fas fa-code me-1"></i>View Source Code
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
'''

dashboard_html = '''
nds "base.html" %}
{% block title %}Dashboard - African Critical Minerals Tracker{% endblock %}
{% block content %}
<div class="hero-section rounded mb-4">
    <div class="container text-center">
        <h1 class="display-4 fw-bold">African Critical Minerals Tracker</h1>
        <p class="lead">Comprehensive data platform for strategic mineral intelligence across Africa</p>
        <p class="mb-0">Welcome, <strong>{{ session.username }}</strong> | Role: <strong>{{ session.role }}</strong></p>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-white bg-primary feature-card">
            <div class="card-body text-center">
                <i class="fas fa-gem fa-3x mb-3"></i>
                <h3>{{ total_minerals }}</h3>
                <p class="mb-0">Critical Minerals</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-success feature-card">
            <div class="card-body text-center">
                <i class="fas fa-globe-africa fa-3x mb-3"></i>
                <h3>{{ total_countries }}</h3>
                <p class="mb-0">African Countries</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-warning feature-card">
            <div class="card-body text-center">
                <i class="fas fa-chart-line fa-3x mb-3"></i>
 <h3>{{ "%.1f"|format(total_production/1000000) }}M</h3>
                <p class="mb-0">Total Production (tons)</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-info feature-card">
            <div class="card-body text-center">
                <i class="fas fa-database fa-3x mb-3"></i>
                <h3>{{ total_countries * total_minerals }}</h3>
                <p class="mb-0">Data Points</p>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="card feature-card">
            <div class="card-body text-center">
                <i class="fas fa-database fa-2x text-primary mb-3"></i>
                <h5>Minerals Database</h5>
                <p>Comprehensive information on critical minerals including cobalt, lithium, and manganese</p>
                <a href="{{ url_for('minerals') }}" class="btn btn-primary">Explore Database</a>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card feature-card">
            <div class="card-body text-center">
                <i class="fas fa-map-marked-alt fa-2x text-success mb-3"></i>
                <h5>Interactive Map</h5>
                <p>Geospatial visualization of mining sites and mineral deposits across Africa</p>
 <a href="{{ url_for('minerals_map') }}" class="btn btn-success">View Map</a>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card feature-card">
            <div class="card-body text-center">
                <i class="fas fa-chart-bar fa-2x text-info mb-3"></i>
                <h5>Data Analytics</h5>
                <p>Interactive charts and trends analysis for production and market data</p>
                <a href="{{ url_for('charts') }}" class="btn btn-info">View Analytics</a>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card feature-card">
            <div class="card-body text-center">
                <h5><i class="fas fa-code me-2"></i>Development</h5>
                <p>Access the complete source code for this application</p>
                <a href="{{ url_for('source_code') }}" class="btn btn-outline-dark" target="_blank">
                    <i class="fas fa-external-link-alt me-1"></i>View Full Source Code
                </a>
            </div>
        </div>
    </div>
</div>
{% if session.role == 'Administrator' %}
<div class="row mt-4">
    <div class="col-12">
        <div class="card feature-card">
            <div class="card-body">
                <h5><i class="fas fa-users-cog me-2"></i>Administrator Tools</h5>
                <p>Manage users and system configuration</p>
                <a href="{{ url_for('admin_users') }}" class="btn btn-warning">
                    <i class="fas fa-cog me-1"></i>User Management
                </a>
            </div>
        </div>
    </div>
</div>
{% endif %}
{% endblock %}
'''
minerals_html = '''
{% extends "base.html" %}
{% block title %}Minerals Database - African Critical Minerals Tracker{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-database me-2"></i>Critical Minerals Database</h1>
    <span class="badge bg-primary fs-6">{{ minerals|length }} Records</span>
</div>

<p class="lead mb-4">Comprehensive information on African critical minerals including production statistics, export values, and market prices.</p>

<div class="row">
    {% for mineral in minerals %}
    <div class="col-lg-6 mb-4">
        <div class="card feature-card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">{{ mineral.name }}</h5>
                <span class="badge bg-success">{{ mineral.price }}</span>
            </div>
            <div class="card-body">
                <p class="card-text">{{ mineral.description }}</p>
                <div class="row">
                    <div class="col-6">
                        <strong><i class="fas fa-globe-africa me-1"></i>Country:</strong><br>
                        <span class="text-primary">{{ mineral.country }}</span>
                    </div>
                    <div class="col-6">
                        <strong><i class="fas fa-calendar me-1"></i>Year:</strong><br>
                        {{ mineral.year }}
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-6">
                        <strong><i class="fas fa-industry me-1"></i>Production:</strong><br>
                        <span class="text-success">{{ mineral.production }} tonnes</span>
                    </div>
                    <div class="col-6">
                        <strong><i class="fas fa-dollar-sign me-1"></i>Export Value:</strong><br>
                        <span class="text-warning">{{ mineral.export_value }}</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% endfor %}
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card feature-card">
            <div class="card-body text-center">
                <a href="{{ url_for('source_code') }}" class="btn btn-outline-secondary" target="_blank">
                    <i class="fas fa-code me-1"></i>View Application Source Code
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}
'''
minerals_html = '''
{% extends "base.html" %}
{% block title %}Minerals Database - African Critical Minerals Tracker{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-database me-2"></i>Critical Minerals Database</h1>
    <span class="badge bg-primary fs-6">{{ minerals|length }} Records</span>
</div>

<p class="lead mb-4">Comprehensive information on African critical minerals including production statistics, export values, and market prices.</p>

<div class="row">
    {% for mineral in minerals %}
    <div class="col-lg-6 mb-4">
        <div class="card feature-card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">{{ mineral.name }}</h5>
                <span class="badge bg-success">{{ mineral.price }}</span>
            </div>
            <div class="card-body">
                <p class="card-text">{{ mineral.description }}</p>
                <div class="row">
                    <div class="col-6">
                        <strong><i class="fas fa-globe-africa me-1"></i>Country:</strong><br>
                        <span class="text-primary">{{ mineral.country }}</span>
                    </div>
                    <div class="col-6">
                        <strong><i class="fas fa-calendar me-1"></i>Year:</strong><br>
                        {{ mineral.year }}
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-6">
                        <strong><i class="fas fa-industry me-1"></i>Production:</strong><br>
                        <span class="text-success">{{ mineral.production }} tonnes</span>
                    </div>
                    <div class="col-6">
                        <strong><i class="fas fa-dollar-sign me-1"></i>Export Value:</strong><br>
                        <span class="text-warning">{{ mineral.export_value }}</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% endfor %}
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card feature-card">
            <div class="card-body text-center">
                <a href="{{ url_for('source_code') }}" class="btn btn-outline-secondary" target="_blank">
                    <i class="fas fa-code me-1"></i>View Application Source Code
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}
'''
map_html = '''
{% extends "base.html" %}
{% block title %}Interactive Map - African Critical Minerals Tracker{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-map-marked-alt me-2"></i>Interactive Minerals Map</h1>
    <a href="{{ url_for('minerals_map') }}" class="btn btn-outline-primary">
        <i class="fas fa-sync-alt me-1"></i>Refresh Map
    </a>
</div>

<p class="lead mb-4">Explore mining sites and mineral deposits across Africa. Click on markers for detailed information.</p>

<div class="card feature-card">
    <div class="card-body p-0">
        <div style="height: 70vh; width: 100%;">
            <iframe src="{{ url_for('static', filename='maps/minerals_map.html') }}" 
                    width="100%" height="100%" frameborder="0" style="border-radius: 8px;"></iframe>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Map Legend</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-2 text-center">
                        <i class="fas fa-map-marker-alt text-primary"></i> Cobalt
                    </div>
                    <div class="col-md-2 text-center">
                        <i class="fas fa-map-marker-alt text-success"></i> Lithium
                    </div>
                    <div class="col-md-2 text-center">
                        <i class="fas fa-map-marker-alt text-dark"></i> Graphite
                    </div>
                    <div class="col-md-2 text-center">
                        <i class="fas fa-map-marker-alt text-warning"></i> Manganese
                    </div>
                    <div class="col-md-2 text-center">
                        <i class="fas fa-map-marker-alt text-info"></i> Platinum
                    </div>
                    <div class="col-md-2 text-center">
                        <i class="fas fa-map-marker-alt text-danger"></i> Copper
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card feature-card">
            <div class="card-body text-center">
                <a href="{{ url_for('source_code') }}" class="btn btn-outline-secondary" target="_blank">
                    <i class="fas fa-code me-1"></i>View Application Source Code
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}
'''

charts_html = '''
{% extends "base.html" %}
{% block title %}Analytics - African Critical Minerals Tracker{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-chart-bar me-2"></i>Data Analytics</h1>
    <span class="badge bg-info fs-6">Interactive Charts</span>
</div>

<p class="lead mb-4">Visual analysis of mineral production and export trends across African countries.</p>

<div class="row">
    <div class="col-md-12 mb-4">
        <div class="card feature-card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-chart-bar me-2"></i>Production by Country</h5>
            </div>
            <div class="card-body">
                <div id="chart1"></div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card feature-card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-chart-pie me-2"></i>Export Value by Mineral</h5>
            </div>
            <div class="card-body">
                <div id="chart2"></div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card feature-card">
            <div class="card-body text-center">
                <a href="{{ url_for('source_code') }}" class="btn btn-outline-secondary" target="_blank">
                    <i class="fas fa-code me-1"></i>View Application Source Code
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script>
    var graph1 = {{ graph1JSON | safe }};
    Plotly.newPlot('chart1', graph1.data, graph1.layout);
    
    var graph2 = {{ graph2JSON | safe }};
    Plotly.newPlot('chart2', graph2.data, graph2.layout);
</script>
{% endblock %}
'''

admin_users_html = '''
{% extends "base.html" %}
{% block title %}User Management - African Critical Minerals Tracker{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-users-cog me-2"></i>User Management</h1>
    <span class="badge bg-warning fs-6">{{ users|length }} Users</span>
</div>

<div class="card feature-card">
    <div class="card-header">
        <h5 class="mb-0"><i class="fas fa-user-shield me-2"></i>System Users</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Username</th>
                        <th>Role</th>
                        <th>Email</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for user in users %}
                    <tr>
                        <td>
                            <i class="fas fa-user me-2"></i>{{ user.Username }}
                            {% if user.RoleName == 'Administrator' %}
                            <span class="badge bg-danger ms-2">Admin</span>
                            {% endif %}
                        </td>
                        <td>{{ user.RoleName }}</td>
                        <td>{{ user.Email }}</td>
                        <td>
                            <form method="POST" action="{{ url_for('admin_reset_password', username=user.Username) }}" 
                                  style="display: inline;" onsubmit="return confirm('Reset password for {{ user.Username }}?')">
                                <button type="submit" class="btn btn-warning btn-sm">
                                    <i class="fas fa-key me-1"></i>Reset Password
                                </button>
                            </form>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card feature-card">
            <div class="card-body text-center">
                <a href="{{ url_for('source_code') }}" class="btn btn-outline-secondary" target="_blank">
                    <i class="fas fa-code me-1"></i>View Application Source Code
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}
'''

source_code_html = '''
{% extends "base.html" %}
{% block title %}Source Code - African Critical Minerals Tracker{% endblock %}
{% block content %}
<div class="row">
    <div class="col-12">
        <div class="card feature-card">
            <div class="card-header bg-dark text-white">
                <h4 class="mb-0"><i class="fas fa-code me-2"></i>Application Source Code</h4>
            </div>
            <div class="card-body">
                <div class="alert alert-info">
                    <h5><i class="fas fa-info-circle me-2"></i>About this Application</h5>
                    <p class="mb-2"><strong>African Critical Minerals Tracker</strong> - A comprehensive web application for tracking and analyzing critical mineral resources across Africa.</p>
                    <p class="mb-0"><strong>University:</strong> University of the Witwatersrand | <strong>Course:</strong> MINN2020A: Computer Programming for Mining</p>
                </div>
                
                <h5 class="mt-4"><i class="fas fa-file-code me-2"></i>Complete Python Code</h5>
                <div class="bg-light p-3 rounded border" style="max-height: 600px; overflow-y: auto;">
                    <pre><code class="language-python">{{ source_code }}</code></pre>
                </div>
                
                <div class="mt-4">
                    <h5><i class="fas fa-download me-2"></i>Quick Actions</h5>
                    <div class="row">
                        <div class="col-md-4">
                            <a href="javascript:void(0);" onclick="copyToClipboard()" class="btn btn-outline-primary w-100 mb-2">
                                <i class="fas fa-copy me-1"></i>Copy Code
                            </a>
                        </div>
                        <div class="col-md-4">
                            <a href="{{ url_for('download_code') }}" class="btn btn-outline-success w-100 mb-2">
                                <i class="fas fa-download me-1"></i>Download Python File
                            </a>
                        </div>
                        <div class="col-md-4">
                            <a href="{{ url_for('dashboard') }}" class="btn btn-outline-secondary w-100 mb-2">
                                <i class="fas fa-arrow-left me-1"></i>Back to App
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
function copyToClipboard() {
    const codeText = `{{ source_code }}`;
    navigator.clipboard.writeText(codeText).then(function() {
        // Show success message
        const originalText = event.target.innerHTML;
        event.target.innerHTML = '<i class="fas fa-check me-1"></i>Copied!';
        event.target.classList.remove('btn-outline-primary');
        event.target.classList.add('btn-success');
        
        setTimeout(function() {
            event.target.innerHTML = originalText;
            event.target.classList.remove('btn-success');
            event.target.classList.add('btn-outline-primary');
        }, 2000);
    }).catch(function(err) {
        console.error('Failed to copy: ', err);
        alert('Failed to copy code to clipboard');
    });
}
</script>
{% endblock %}
'''
# -------------------- Template Writing --------------------
def create_templates():
    """Create all HTML template files"""
    templates = {
        'base.html': base_html,
        'login.html': login_html,
        'signup.html': signup_html,
        'dashboard.html': dashboard_html,
        'minerals.html': minerals_html,
        'map.html': map_html,
        'charts.html': charts_html,
        'admin_users.html': admin_users_html,
        'source_code.html': source_code_html,
    }
    
    for filename, content in templates.items():
        filepath = os.path.join("templates", filename)
        if not os.path.exists(filepath):
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"Created template: {filepath}")

create_templates()

# -------------------- Auto-open browser function --------------------
def open_browser():
    """Wait for the server to start and then open the browser automatically"""
    time.sleep(2)  # Wait 2 seconds for the server to start
    webbrowser.open_new('http://127.0.0.1:5000')

# -------------------- Routes --------------------
@app.route('/')
def home():
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')

        users_df = load_csv('users.csv')
        user_row = users_df[users_df['Username'] == username]
        
        if not user_row.empty and check_password_hash(user_row.iloc[0]['PasswordHash'], password):
            session['username'] = username
            role_id = user_row.iloc[0]['RoleID']
            
            # Get role name
            roles_df = load_csv('roles.csv')
            role_name = roles_df[roles_df['RoleID'] == role_id]['RoleName'].iloc[0]
            session['role'] = role_name
            
            flash(f"Welcome back, {username}!", "success")
            return redirect(url_for('dashboard'))
        else:
            flash("Invalid username or password", "danger")
    
    return render_template('login.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')
        role_name = request.form.get('role', '')

        users_df = load_csv('users.csv')
        if username in users_df['Username'].values:
            flash("Username already exists! Please choose another.", "warning")
            return redirect(url_for('signup'))

        roles_df = load_csv('roles.csv')
        role_id = roles_df[roles_df['RoleName'] == role_name]['RoleID'].iloc[0]
        
        new_user = pd.DataFrame([{
            "UserID": len(users_df) + 1,
            "Username": username,
            "PasswordHash": generate_password_hash(password),
            "RoleID": role_id,
            "Email": f"{username}@chronominerals.com"
        }])
        
        users_df = pd.concat([users_df, new_user], ignore_index=True)
        save_csv(users_df, 'users.csv')
        
        flash("Registration successful! Please login with your new account.", "success")
        return redirect(url_for('login'))
    
    return render_template('signup.html')

@app.route('/logout')
def logout():
    session.clear()
    flash("You have been logged out successfully.", "info")
    return redirect(url_for('login'))

@app.route('/dashboard')
@login_required
def dashboard():
    # Load some stats for the dashboard
    minerals_df = load_csv('minerals.csv')
    countries_df = load_csv('countries.csv')
    production_df = load_csv('production_stats.csv')
    
    total_minerals = len(minerals_df)
    total_countries = len(countries_df)
    total_production = production_df['Production_tonnes'].sum()
    
    return render_template('dashboard.html', 
                         total_minerals=total_minerals, 
                         total_countries=total_countries, 
                         total_production=total_production)

@app.route('/minerals')
@login_required
def minerals():
    minerals_df = load_csv('minerals.csv')
    countries_df = load_csv('countries.csv')
    production_df = load_csv('production_stats.csv')

    # Merge data to get comprehensive mineral information
    merged = production_df.merge(minerals_df, on='MineralID').merge(countries_df, on='CountryID')
    
    minerals_list = []
    for _, row in merged.iterrows():
        minerals_list.append({
            "name": row['MineralName'],
            "description": row['Description'],
            "country": row['CountryName'],
            "year": row['Year'],
            "production": f"{row['Production_tonnes']:,}",
            "export_value": f"${row['ExportValue_BillionUSD']}B",
            "price": f"${row['MarketPriceUSD_per_tonne']:,.0f}/ton"
        })

    return render_template('minerals.html', minerals=minerals_list)

@app.route('/minerals_map')
@login_required
def minerals_map():
    sites_df = load_csv('sites.csv')
    minerals_df = load_csv('minerals.csv')
    countries_df = load_csv('countries.csv')

    # Create map centered on Africa
    m = folium.Map(location=[-8, 20], zoom_start=4, tiles='CartoDB positron')
    
    # Add markers for each mining site
    for _, site in sites_df.iterrows():
        mineral_name = minerals_df[minerals_df['MineralID'] == site['MineralID']]['MineralName'].iloc[0]
        country_name = countries_df[countries_df['CountryID'] == site['CountryID']]['CountryName'].iloc[0]
        mineral_price = minerals_df[minerals_df['MineralID'] == site['MineralID']]['MarketPriceUSD_per_tonne'].iloc[0]
        
        # Calculate estimated market value
        market_value = site['Production_tonnes'] * mineral_price
        
        popup_html = f"""
        <div style="width: 250px;">
            <h5><b>{site['SiteName']}</b></h5>
            <hr>
            <p><b>Mineral:</b> {mineral_name}</p>
            <p><b>Country:</b> {country_name}</p>
            <p><b>Production:</b> {site['Production_tonnes']:,} tonnes</p>
            <p><b>Market Value:</b> ${market_value:,.0f}</p>
            <p><b>Price/ton:</b> ${mineral_price:,.0f}</p>
        </div>
        """
        
        # Color code markers by mineral type
        color_map = {
            'Cobalt': 'blue',
            'Lithium': 'green', 
            'Graphite': 'black',
            'Manganese': 'orange',
            'Platinum': 'purple',
            'Copper': 'red',
            'Nickel': 'gray',
            'Chromium': 'darkred'
        }
        
        folium.Marker(
            [site['Latitude'], site['Longitude']],
            popup=folium.Popup(popup_html, max_width=300),
            tooltip=f"{mineral_name} - {site['SiteName']}",
            icon=folium.Icon(color=color_map.get(mineral_name, 'blue'), icon='info-sign')
        ).add_to(m)
    
    # Save map
    map_path = 'static/maps/minerals_map.html'
    m.save(map_path)
    
    return render_template('map.html')

@app.route('/charts')
@login_required
def charts():
    production_df = load_csv('production_stats.csv')
    countries_df = load_csv('countries.csv')
    minerals_df = load_csv('minerals.csv')
    
    # Merge data
    merged = production_df.merge(countries_df, on='CountryID').merge(minerals_df, on='MineralID')
    
    # Chart 1: Production by Country
    country_production = merged.groupby('CountryName')['Production_tonnes'].sum().sort_values(ascending=False)
    
    trace1 = go.Bar(
        x=country_production.index,
        y=country_production.values,
        name='Production (tonnes)',
        marker_color='rgb(55, 83, 109)'
    )
    
    layout1 = go.Layout(
        title='Total Mineral Production by Country',
        xaxis_title='Country',
        yaxis_title='Production (tonnes)',
        height=400
    )
    
    fig1 = go.Figure(data=[trace1], layout=layout1)
    graph1JSON = json.dumps(fig1, cls=plotly.utils.PlotlyJSONEncoder)
    
    # Chart 2: Export Value by Mineral
    mineral_exports = merged.groupby('MineralName')['ExportValue_BillionUSD'].sum().sort_values(ascending=False)
    
    trace2 = go.Pie(
        labels=mineral_exports.index,
        values=mineral_exports.values,
        name='Export Value'
    )
    
    layout2 = go.Layout(
        title='Export Value Distribution by Mineral',
        height=400
    )
    
    fig2 = go.Figure(data=[trace2], layout=layout2)
    graph2JSON = json.dumps(fig2, cls=plotly.utils.PlotlyJSONEncoder)
    
    return render_template('charts.html', graph1JSON=graph1JSON, graph2JSON=graph2JSON)

@app.route('/admin/users')
@admin_required
def admin_users():
    users_df = load_csv('users.csv')
    roles_df = load_csv('roles.csv')
    
    users_with_roles = users_df.merge(roles_df, on='RoleID')
    
    return render_template('admin_users.html', users=users_with_roles.to_dict('records'))

@app.route('/admin/reset/<username>', methods=['POST'])
@admin_required
def admin_reset_password(username):
    users_df = load_csv('users.csv')
    
    if username in users_df['Username'].values:
        new_password = secrets.token_urlsafe(8)  # Generate random password
        users_df.loc[users_df['Username'] == username, 'PasswordHash'] = generate_password_hash(new_password)
        save_csv(users_df, 'users.csv')
        flash(f"Password reset for {username}. New password: {new_password}", "success")
    else:
        flash("User not found", "danger")
    
    return redirect(url_for('admin_users'))

@app.route('/source_code')
def source_code():
    """Display the complete source code"""
    # Read the current Python file
    current_file = __file__
    with open(current_file, 'r', encoding='utf-8') as f:
        source_code = f.read()
    
    return render_template('source_code.html', source_code=source_code)

@app.route('/download_code')
def download_code():
    """Download the Python source code as a file"""
    current_file = __file__
    return send_file(current_file, as_attachment=True, download_name='african_minerals_tracker.py')

# Add the missing import for send_file
from flask import send_file

if __name__ == '__main__':
    print("=" * 70)
    print("AFRICAN CRITICAL MINERALS TRACKER")
    print("=" * 70)
    print("Starting application...")
    print("Data files initialized successfully!")
    print("Application will open automatically in your browser...")
    print("")
    print("TEST ACCOUNTS:")
    print("   Administrator: admin01 / hash123")
    print("   Investor:      investor01 / hash456") 
    print("   Researcher:    research01 / hash789")
    print("")
    print("FEATURES:")
    print("   Role-Based Access Control")
    print("   Minerals Database")
    print("   Interactive Map")
    print("   Data Analytics & Charts")
    print("   Country Profiles")
    print("   User Management (Admin only)")
    print("   View Source Code")
    print("   Download Python File")
    print("=" * 70)
    
    # Start the browser automatically
    threading.Timer(1.5, open_browser).start()
    
    # Run the app
    app.run(debug=True, host='127.0.0.1', port=5000, use_reloader=False)
